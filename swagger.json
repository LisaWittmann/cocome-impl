{
  "openapi": "3.0.1",
  "info": {
    "title": "CoCoME",
    "version": "v1"
  },
  "paths": {
    "/api/CashDesk/products/{storeId}": {
      "get": {
        "tags": [
          "CashDesk"
        ],
        "summary": "endpoint to request the available products in a store",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "search param to filter products by name or id",
            "schema": {
              "type": "string",
              "description": "search param to filter products by name or id",
              "nullable": true
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "products in requested format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTOPagedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/CashDesk/products/{storeId}/{productId}": {
      "get": {
        "tags": [
          "CashDesk"
        ],
        "summary": "endpoint to request a product in a stores stock by its id",
        "description": "Sample request:\r\n            \r\n    GET /api/cashdesk/products/1/1",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "unique identifier of the product",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the product",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns the requested product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTO"
                }
              }
            }
          },
          "404": {
            "description": "product entry was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/CashDesk/checkout/{storeId}": {
      "post": {
        "tags": [
          "CashDesk"
        ],
        "summary": "endpoint to confirm a sale on the cashdesk, update the stores stock\r\nand print the sale\r\nbilling",
        "description": "Sample request:\r\n            \r\n    POST /api/cashdesk/checkout/1\r\n    {\r\n        \"saleElements\": [],\r\n        \"paymentMethod\": 0,\r\n        \"timeStamp\": \"\\\"2022-02-23T18:45:20.634Z\\\",\r\n        \"total\": 0,\r\n        \"payed\": 0\r\n    }",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "transfer object containing the sale informations",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaleTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns billing as pdf for the sale"
          },
          "409": {
            "description": "a product of the sale is out of stock",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "store was not found",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/CashDesk/checkout/card": {
      "post": {
        "tags": [
          "CashDesk"
        ],
        "summary": "endpoint to perform a card payment",
        "description": "Sample request:\r\n            \r\n    POST /api/cashdesk/checkout/card\r\n    {\r\n        \"number\": \"DE123455689\"\r\n        \"pin\": 1234\r\n    }",
        "requestBody": {
          "description": "transfer object containing the credit card information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCardTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCardTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCardTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "credit card payment confiremed"
          },
          "400": {
            "description": "credit card was not accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/stores": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to request all store entries from the database",
        "description": "Sample request:\r\n            \r\n    GET /api/enterprise/stores",
        "responses": {
          "200": {
            "description": "list of all store entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Store"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to create a new store enty in the database",
        "description": "Sample request:\r\n            \r\n    POST /api/enterprise/stores\r\n    {\r\n        \"name\": \"Filiale Test\",\r\n        \"city\": \"Wiesbaden\",\r\n        \"postalCode\": 65183,\r\n    }",
        "requestBody": {
          "description": "object containing the new data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "new store was added to database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "400": {
            "description": "store could not be created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/stores/{storeId}": {
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to modify an store entry in database",
        "description": "Sample request:\r\n            \r\n    PUT /api/enterprise/stores/1\r\n    {\r\n        \"name\": \"Filiale Test\",\r\n        \"city\": \"Wiesbaden\",\r\n        \"postalCode\": 65183,\r\n    }",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "object containing the new data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Store"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "store was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "404": {
            "description": "store to modidy could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "store could not be updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/stores/{storeId}/stock": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to create a new stock item entry with the given product for\r\nthe store with the given id",
        "description": "Sample request:\r\n            \r\n    POST /api/enterprise/stores/1/stock\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Eistee Zitrone\",\r\n        \"price\": 0.69,\r\n        \"salePrice\": 1.39,\r\n        \"description\": \"\",\r\n        \"imageUrl\": \"\",\r\n        \"provider\": {\r\n            \"id\": 1,\r\n            \"name\": \"Spedition Heinrich\"\r\n        }\r\n    }",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "data transfer object containing information of the product that should\r\nbe added to stock",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "product was added to stores stock",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Store"
                  }
                }
              }
            }
          },
          "404": {
            "description": "product or store was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "product could not be added to stock",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/products": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to request all product entries from the database",
        "description": "Sample request:\r\n            \r\n    GET /api/enterprise/products",
        "responses": {
          "200": {
            "description": "all product entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to create a new product entry in the database",
        "description": "Sample request:\r\n            \r\n     POST /api/enterprise/products\r\n     {\r\n        \"id\": 0,\r\n        \"name\": \"Testprodukt\",\r\n        \"price\": 0.69,\r\n        \"salePrice\": 1.39,\r\n        \"description\": \"\",\r\n        \"imageUrl\": \"\",\r\n        \"provider\": {\r\n            \"id\": 1,\r\n            \"name\": \"Spedition Heinrich\"\r\n        }\r\n     }",
        "requestBody": {
          "description": "tranfer object containing the new products data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "product was successfully added to database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTO"
                }
              }
            }
          },
          "400": {
            "description": "product could not be created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/products/{productId}": {
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to modify a product entry in the database",
        "description": "Sample request:\r\n            \r\n     PUT /api/enterprise/products/1\r\n     {\r\n        \"id\": 1,\r\n        \"name\": \"Neuer Produktname\",\r\n        \"price\": 0.69,\r\n        \"salePrice\": 1.39,\r\n        \"description\": \"\",\r\n        \"imageUrl\": \"\",\r\n        \"provider\": {\r\n            \"id\": 1,\r\n            \"name\": \"Spedition Heinrich\"\r\n        }\r\n     }",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "unique identifier of the product",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the product",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "transfer object containing the new data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "product was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTO"
                }
              }
            }
          },
          "404": {
            "description": "product with id was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "product could not be updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/products/{productId}/stores": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to request all stores which have the product with the given\r\nid in their stockitems",
        "description": "Sample request:\r\n            \r\n     GET /api/enterprise/1/stores",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "unique identifier of the product",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the product",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns all stores which have the product in stock",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Store"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/providers": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to request all provider entries from the database",
        "description": "Sample request:\r\n            \r\n     GET /api/enterprise/providers",
        "responses": {
          "200": {
            "description": "returns all provider entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Provider"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to create a new provider entry in the database",
        "description": "Sample request:\r\n            \r\n     POST /api/enterprise/providers/1\r\n     {\r\n        \"id\": 0,\r\n        \"name\": \"Lieferant Test\",\r\n     }",
        "requestBody": {
          "description": "object containing the new data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Provider"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Provider"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Provider"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "provider was successfully added to database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "description": "provider could not be created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/providers/{providerId}": {
      "put": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to modify a provider entry in database",
        "description": "Sample request:\r\n            \r\n     POST /api/enterprise/stores/1/stock\r\n     {\r\n        \"id\": 1,\r\n        \"name\": \"Neuer Lieferanten Name\",\r\n     }",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "unique identifier of the provider",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the provider",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "object containing the new data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Provider"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Provider"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Provider"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "provider was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "404": {
            "description": "provider with id was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "provider could not be updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/reports/delivery": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to request all providers delivery reports",
        "description": "Sample request:\r\n            \r\n     GET /api/enterpise/reports/delivery",
        "responses": {
          "200": {
            "description": "list of delivery reports of each provider",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Enterprise/reports/profits": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "endpoint to request a report of all stores current years profits",
        "description": "Sample request:\r\n            \r\n     GET /api/enterpise/reports/profits",
        "responses": {
          "200": {
            "description": "list of profit reports of each store",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/FileUpload": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "summary": "endpoint to upload a form file to server",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "file object to upload",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "file was saved under returned path"
          }
        }
      }
    },
    "/_configuration/{clientId}": {
      "get": {
        "tags": [
          "OidcConfiguration"
        ],
        "summary": "endpoint to request the applications OpenID identity server configuration",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "registered clientname for OpenID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "registered clientname for OpenID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "identity server configuration"
          }
        }
      }
    },
    "/api/Store/{storeId}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to request a store database entry by its id",
        "description": "Sample request:\r\n            \r\n    GET /api/store/1",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identitifier of the requested store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitifier of the requested store",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns store entry with given order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            }
          },
          "404": {
            "description": "store was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/profit/{storeId}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to request a stores overall profit by storeid",
        "description": "Sample request:\r\n            \r\n    GET /api/store/profit/1",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "overall reports of the stores profit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "404": {
            "description": "store was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/profit/{storeId}/{year}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "endpint to request a stores profit by year",
        "description": "Sample request:\r\n            \r\n    GET /api/store/profit/1/2022",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identitfier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitfier of the store",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "path",
            "description": "year to filter profit for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "year to filter profit for",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "report of the stores profit in the requested year",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "404": {
            "description": "store was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/inventory/{storeId}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to request a stores stockitems by storeid",
        "description": "Sample request:\r\n            \r\n    GET /api/store/inventory/1",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identitfier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitfier of the store",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "all stock items related with the store",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/orders/{storeId}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to request a stores latest orders by storeid",
        "description": "Sample request:\r\n            \r\n    GET /api/store/orders/1",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identitfier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitfier of the store",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "latest orders related to the store",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to create a new order for the store with the given id and\r\nthe incomming order elements as transfer objects",
        "description": "Sample request:\r\n            \r\n    POST /api/store/orders/1\r\n    [{\r\n        \"amount\": 10,\r\n        \"product\": {\r\n            \"id\": 1,\r\n            \"name\": \"Eistee Zitrone\",\r\n            \"price\": 0.69,\r\n            \"salePrice\": 1.39,\r\n            \"description\": \"\",\r\n            \"imageUrl: \"\",\r\n            \"provider\": {\r\n                \"id\": 1,\r\n                \"name\": \"Spedition Heinrich\",\r\n            }\r\n         }\r\n    }]",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identitfier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitfier of the store",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "transfer objects of order elements",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderElementTO"
                },
                "description": "transfer objects of order elements",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderElementTO"
                },
                "description": "transfer objects of order elements",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderElementTO"
                },
                "description": "transfer objects of order elements",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "order was successfully placed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "order could not be placed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/orders/{storeId}/close": {
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to mark an order as delivered and add the order element to\r\nthe stores stock items",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identitfier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitfier of the store",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "order transfer object containing the id of the object to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "order was closed and items were added to stock",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "order could not be closed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "order was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/products/{storeId}": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to modify a product of the inventory of the store with the given id",
        "description": "Sample request:\r\n            \r\n    PUT /api/store/products/1\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Neuer Name\",\r\n        \"price\": 0.69,\r\n        \"salePrice\": 2.51,\r\n        \"description\": \"Neue Beschreibung\",\r\n        \"imageUrl\": \"Image/url.png\",\r\n        \"provider\": {\r\n            \"id\": 1,\r\n            \"name\": \"Spedition Heinrich\",\r\n         }\r\n    }",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identitfier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitfier of the store",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "product transfer object containing the updated product data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProductTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "product was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockItem"
                  }
                }
              }
            }
          },
          "409": {
            "description": "product is not in stock of the reuesting store",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "product could not be updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/products/{storeId}/{productId}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "endpint to request a product of the stores inventory by its id",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identitfier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitfier of the store",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "unique identitfier of the product",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identitfier of the product",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTO"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/exchanges/{storeId}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to request a stores outstanding stock exchanges with another store",
        "description": "Sample request:\r\n            \r\n    GET /api/store/exchanges/1",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return list of latest store exchanges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockExchangeTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/exchanges/{storeId}/start": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to initiate a stock exchange and therefore update the placing\r\ndate and remove the products from the providing stores inventory",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "information about the exchange to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockExchangeTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StockExchangeTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StockExchangeTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "exchanges was started and items were removed from stock",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockExchangeTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "exchange was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Store/exchanges/{storeId}/close": {
      "put": {
        "tags": [
          "Store"
        ],
        "summary": "endpoint to initiate a stock exchange and therefore update the\r\ndelivering date and add the products to the receiving stores inventory",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "unique identifier of the store",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique identifier of the store",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "information about the exchange to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockExchangeTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StockExchangeTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StockExchangeTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockExchangeTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "endpoint to request all application users from the database",
        "description": "Sample request:\r\n            \r\n    GET /api/user",
        "responses": {
          "200": {
            "description": "returns all user entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "endpoint to create a new application user",
        "description": "Sample request:\r\n            \r\n    PUT /api/user\r\n    {\r\n        \"firstName\": \"Erika\",\r\n        \"lastName\": \"Mustermann\",\r\n        \"email\": \"erikam@mail.com\",\r\n        \"store\":\r\n            {\r\n                \"id\": 1,\r\n                \"name\": \"Filiale Mustermann\",\r\n            },\r\n        \"roles\": [\"Kassierer\"],\r\n    }",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUser"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "endpoint to modify a user with the given transfer objects username",
        "description": "Sample request:\r\n            \r\n    PUT /api/user\r\n    {\r\n        \"firstName\": \"Max\",\r\n        \"lastName\": \"Mustermann\",\r\n        \"email\": \"manager@mail.com\",\r\n        \"store\":\r\n            {\r\n                \"id\": 1,\r\n                \"name\": \"Filiale Mustermann\",\r\n            },\r\n        \"roles\": [\"Manager\"],\r\n    }",
        "requestBody": {
          "description": "user transfer object containing the new data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTO"
                }
              }
            }
          },
          "404": {
            "description": "user entry was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Provider": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "class {Provider} defines the information of an enterprises product\r\nprovider"
      },
      "ProductTO": {
        "required": [
          "id",
          "name",
          "price",
          "provider",
          "salePrice"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "salePrice": {
            "type": "number",
            "format": "float"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          }
        },
        "additionalProperties": false,
        "description": "class {ProductTO} is a data transfer object of class CocomeStore.Models.Product"
      },
      "ProductTOPagedResponse": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "firstPage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "lastPage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          },
          "nextPage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "class {PagedResponse} is a data transfer object to send large\r\nenumerables of data as a paged response with meta data"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "Product": {
        "required": [
          "name",
          "price",
          "providerId",
          "salePrice"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "salePrice": {
            "type": "number",
            "format": "float"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "providerId": {
            "type": "integer",
            "format": "int32"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          }
        },
        "additionalProperties": false,
        "description": "class {Product} defines the data of an enterprises offered product"
      },
      "SaleElementTO": {
        "required": [
          "amount",
          "product"
        ],
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "discount": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false,
        "description": "class {SaleElementTO} is a data transfer object for class\r\nCocomeStore.Models.SaleElement and extends class CocomeStore.Models.Transfer.TradeElementTO"
      },
      "PaymentMethod": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "enumeration {PaymentMethod}",
        "format": "int32"
      },
      "Store": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "class {Store} defines the information of an enterprises store instance"
      },
      "SaleTO": {
        "required": [
          "payed",
          "paymentMethod",
          "saleElements",
          "timeStamp",
          "total"
        ],
        "type": "object",
        "properties": {
          "saleElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleElementTO"
            }
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "payed": {
            "type": "number",
            "format": "float"
          },
          "total": {
            "type": "number",
            "format": "float"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          }
        },
        "additionalProperties": false,
        "description": "class {SaleTO} is a data transfer object of class CocomeStore.Models.Sale"
      },
      "CreditCardTO": {
        "type": "object",
        "additionalProperties": false
      },
      "Report": {
        "required": [
          "dataset",
          "label"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "dataset": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "additionalProperties": false,
        "description": "class {Report} is a data transfer object to unite a dataset\r\nwith a describing label"
      },
      "StockItem": {
        "required": [
          "productId",
          "stock",
          "storeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "storeId": {
            "type": "integer",
            "format": "int32"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "minimum": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "class {StockItem} defines the structure of a stores inventory unit"
      },
      "TradeElementTO": {
        "required": [
          "amount",
          "product"
        ],
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "class {TradeElementTO} is a data transfer object for class\r\nCocomeStore.Models.TradeElement"
      },
      "OrderTO": {
        "required": [
          "elements",
          "placingDate",
          "provider",
          "store"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeElementTO"
            }
          },
          "placingDate": {
            "type": "string",
            "format": "date-time"
          },
          "deliveringDate": {
            "type": "string",
            "format": "date-time"
          },
          "closed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "class {OrderTO} is a data transfer object of class CocomeStore.Models.Order\r\nand extends class CocomeStore.Models.Transfer.TradeTO`1 for provider class\r\nCocomeStore.Models.Provider"
      },
      "OrderElementTO": {
        "required": [
          "amount",
          "product"
        ],
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "class {OrderElementTO} is a data transfer object for class\r\nCocomeStore.Models.OrderElement and extends class CocomeStore.Models.Transfer.TradeElementTO"
      },
      "StockExchangeTO": {
        "required": [
          "elements",
          "placingDate",
          "provider",
          "store"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "provider": {
            "$ref": "#/components/schemas/Store"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeElementTO"
            }
          },
          "placingDate": {
            "type": "string",
            "format": "date-time"
          },
          "deliveringDate": {
            "type": "string",
            "format": "date-time"
          },
          "closed": {
            "type": "boolean"
          },
          "sended": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "class {StockExchangeTO} is a data transfer object of class\r\nCocomeStore.Models.StockExchange and extends class CocomeStore.Models.Transfer.TradeTO`1\r\nfor provider class CocomeStore.Models.Store"
      },
      "UserTO": {
        "required": [
          "email",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "class {UserTO} is a data transfer object for class\r\nCocomeStore.Models.Authorization.ApplicationUser"
      },
      "ApplicationUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "normalizedUserName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "normalizedEmail": {
            "type": "string",
            "nullable": true
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "securityStamp": {
            "type": "string",
            "nullable": true
          },
          "concurrencyStamp": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberConfirmed": {
            "type": "boolean"
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "lockoutEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockoutEnabled": {
            "type": "boolean"
          },
          "accessFailedCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "storeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "store": {
            "$ref": "#/components/schemas/Store"
          }
        },
        "additionalProperties": false,
        "description": "class {ApplicationUser} overwrites the default implementation of\r\nASP identity's Microsoft.AspNetCore.Identity.IdentityUser"
      }
    }
  }
}